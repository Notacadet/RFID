<?php
class MySqltestuserTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    /**public function getConnection()
    {
        pdo_mysql 
        $database = 'rfid_database';
        $user = 'root';
        $password = 'sqldba';
        $pdo = new PDO('mysql:host', $user, $password);
		//.. sets a new pdo
        return $this->createDefaultDBConnection($pdo, $database);
		//.. returns the default databse connection
    }**/
    public function getConnection()
    {
        $servername = "localhost";
        $username = "root"
        $password = "sqldba"
        $database = "test"     
        $pdo = new PDO("mysql:host=$servername;dbname=$database", $username, $password);;
        /*return $this->createDefaultDBConnection($pdo, ':memory:');*/
    }

    //...public function testUser()
    //...{
       //... $tableNames = array('testuser');
        // ...
	public function getDataSet()
	{
		return $this->createFlatXmlDataSet('database.xml');	
	}	

    public function testUpdateEntry()
    {
        $testuser = array('testuser');
		//.. creates a new array named testuser
        $testuser->deleteEntry("firstname", "lastname");
		//.. deletes a new entry to the testuser array
        $queryTable = $this->getConnection()->createQueryTable(
            'testuser', 'SELECT id, content, user FROM testuser'
			//.. connects to the testuser query and retrives all data
        );
        $expectedTable = $this->createFlatCsvDataSet("database.csv")
                              ->getTable("guestbook");
		//.. sets the expected table as the new array with the added entires
        $this->assertTablesEqual($expectedTable, $queryTable);
		//.. asserts that the query table is the same as the new array 
    }
        public function testDelete()
    {
        $deleteOperation = new PHPUnit_Extensions_Database_Operation_Delete();
        $deleteOperation->execute($this->getConnection(), new createFlatXmlDataSet('databaseDeleteTest.xml'));
        $this->assertDataSetsEqual(new createFlatXmlDataSet('databaseDeleteResult.xml'), $this->getConnection()->createDataSet());
    }
        public function testCreate()
    {
        $updateOperation = new PHPUnit_Extensions_Database_Operation_Insert();
        $updateOperation->execute($this->getConnection(), new createFlatCsvDataSet('databaseInsertTest.csv'));
        $this->assertDataSetsEqual(new createFlatCsvDataSet('databaseInsertResult.csv'), $this->getConnection()->createDataSet());
    }
}
?>
